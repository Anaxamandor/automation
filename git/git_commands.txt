
################################################################
>>> installing git on RHEL:

It should be installed by default on RHEL, but if there are issues:

sudo yum update
sudo yum install git

git --version 
#################################################################
>>> configuring git:

you can create a global configuration which applies to all folders across the file system
or, you can create a configuration for a particular folder 

global configuration:
git config --global user.name "ipvzero"
git config --global user.email ipvzero@gmail.com
git config -l  (verifies the above configured items)

#################################################################
>>> creating a repository (local method):

mkdir Important-Files  
cd Important-Files
git init (initializes the empty directory)
ls -la (shows the .git file has been created, meaning this is now a local repository)

(this method is not preferred as it requires making configs to tell git where to send it.  It is better to use cloning instead)

#################################################################
>>> creating a repository (remote method/cloning)

(this method is preferable to the local method because it pulls down the configs needed to reach the remote repository)

cd
mkdir Clone-Test
cd Clone-Test
ls -la (nothing there yet)
go to github account repository
copy the https url
git clone https://github.com/moon-canyon/automation.git [optional: target directory]
ls -la 
The automation folder appears.  Note that the Clone-Test folder is not a git folder but the automation folder is. 


################################################################
>>> git process:

git status  (says no files to track)
create a file to track: vim file1.txt
git status  (now it says there is an untracked file, meaning git notices it's there but is not actually tracking it)
git add file1.txt (staging changes)
git status (now it says 1 file is tracked)
git commit -m "This is the first version of this file" file1.txt
git status (says working tree clean)

now make a change to the file and save it.
git status (now it says there is a modification)
git add file1.txt
git status
git commit -m "made a change" file1.txt
git status

###################################################################
>>> check the difference between the last committed state and the current state of a file:

git diff file1.txt

###################################################################
>>> pushing changes to github:

first, create repository, commit a file, and and clone the repository:

create a repository (optionally with README.md file option selected)
git clone HTTPS URL
create a file
git add the file
git commit the file

second, generate the token:
profile picture -> settings
scroll down -> developer settings -> personal access tokens
generate new token -> enter password
give token name, expiration
choose what you will allow the token to do (if unsure just click repo and let it autoselect)
click on generate token
copy the token and paste it in a notepad

third, configure git remember tokens you enter:

git config --global credential.helper store

finally, push the local changes up to the repository:

git push -u origin main  (do this command directly from RHEL as VSCode does weird stuff)
enter the username
enter the token when it asks for the password















