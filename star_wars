- name: Get interface IP addresses
  ios_command:
    commands:
      - show ip interface brief
  register: output

- name: Parse interface IP addresses
  set_fact:
    interface_ips: "{{ output.stdout[0] | splitlines | map('split') | map({'interface': item[0], 'ip_address': item[1] | default(omit)}) | list | dict }}"
    
    
Explanation:
Sure, here's an example of using the Ansible filter `| default(omit)` for network automation:

Let's say you're managing a network of routers, and you want to generate a report that lists all the 
interfaces on each router and their corresponding IP addresses. However, some routers may not have any 
IP addresses configured on some interfaces, and you don't want those interfaces to be included in the report.

To accomplish this, you can use the `ios_command` module in Ansible to execute the "show ip interface brief" 
command on each router, and then use the `splitlines` filter to split the output into a list of lines. Then, you 
can use the `map` filter to apply a transformation to each line, and the `default` filter to omit any lines that 
don't match the desired pattern. Finally, you can use the `dict` filter to convert the list of lines into a dictionary, 
with the interface names as the keys and the IP addresses as the values.

Here's the Ansible task to accomplish this:

In this example, the `ip_address` field is set to `omit` if it's not present in the output for a particular interface. 
This ensures that the interface is not included in the final report if it doesn't have an IP address configured.

