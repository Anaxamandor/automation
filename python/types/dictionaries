DICTIONARIES:
##############################################################################################################
# General info:

keys must be hashable -> immutable object.  So strings, ints, tuples can serve as keys, but not lists
##############################################################################################################
# creating a dictionary

my_dict = {"name": "John", "age": 35, "name": "McGovern", "hobbies": "Drums"}

in this example above, the second value McGovern overwrites John in the dictionary because keys cannot duplicate.


##############################################################################################################
# adding keys:

my_dict["platform"] = "cisco_ios"   (adds a new k/v pair)

##############################################################################################################
# accessing keys:

method 1:
my_dict["hostname"]

method 2:
my_dict.get("hostname")  (returns None instead of error for keys not found; can added in a second argument to give a message when keys not found)

##############################################################################################################
# removing keys:

method1
del my_dict["key_name"]  (this removes the key and the associated value)

method2: 
device.pop("key")  (unlike lists, must specify)
Can assign the output value to a variable:  
deleted_password = device.pop("password")
can add in a message if key is not found:
device.pop("version, "Key not found")

##############################################################################################################
# accessing dictionary keys using keys() method:

device_info.keys()
list_of_keys = list(device_info.keys())

##############################################################################################################
# accessing dictionary values:

device_info.values()
list_of_values = list(device_info.values())

##############################################################################################################
# accessing key value pairs as tuples using items() method:

device_info.items()
list_of_items = list(device_info.items()
(this creates a tuple not a list, but tuples are iterable)
##############################################################################################################
# iterate through list or tuple:

for value in device_info.values():

for key in device_info.keys():

for k, v in device_info.items():
##############################################################################################################
# iterate and sort alphabetically:
for key in sorted(device_info.keys()):


##############################################################################################################
# auto-combine / unpacking the dictionaries:

chocolate_prices = {"dairy milk": 70, "mars: 65, "galaxy": 75}
chocolate_prices["mars"]

pizza_prices = {"pepperoni": 7, "spicy chicken": 8}

food_prices = {**chocolate_prices, **pizz_prices}











