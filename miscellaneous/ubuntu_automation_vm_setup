sudo apt update
sudo apt upgrade

Install some basic Linux tools and utilities:
sudo apt-get install curl
sudo apt-get install libssl-dev (equivalent to openssl-dev on other distributions)

Ubuntu includes the wget tool, so you do not need to install it separately.

Install the typical developer tools and utilities, for example, the gcc C compiler:
sudo apt-get install build-essential


###########################
SOURCE CONTROL

Git needs to be installed as a separate package, but can easily be installed:
sudo apt-get install git

verifying git:
Create a personal access token with repo permissions in the Settings of your personal GitHub account, 
under Personal access tokens. Refer to GitHub's documentation for "Creating a personal access token".
In these exercises, enter the token whenever you're prompted for a password, as shown in the following example.

git clone https://github.com/username/repo.git
Username: your_username
Password: your_token

#############################
PYTHON

git --version
git clone https://github.com/CiscoDevNet/hello_network
cd hello_network
./hello_network.sh

python -V
sudo apt install python3
sudo apt install python3-pip

cd ~
python3 -V

sudo apt install python3.8-venv
python3.8 -m venv py3-venv
python -V  (to verify python is now linked to Python 3)
which python  (You also see that the python command is using the new install of Python within your venv folder)
deactivate

#################################################
INSTALL NODE

There are two different Node.js options when installing. 
It’s possible to use the distro-stable package with APT, or to branch out and use version-specific 
versions of Node.js using NVM, the Node Version Manager.
For DevNet Lab purposes, the distro-stable version should be fine since it is 8.x.

sudo apt install nodejs
sudo apt install npm
nodejs -v

# Expected output, depending on version of Ubuntu
v10.19.0

##################################################
INSTALL ATOM

Because Atom only offers install via Debian package in Ubuntu (.deb), we can’t use apt to do the install. Luckily, we can use the snap installer instead. 
Your system should already have the snap installer, but if not,you can install it.

sudo apt install snapd
sudo snap install atom --classic
Once the program installs you can launch Atom by typing atom from the terminal, or find it under Applications.

###################################################
INSTALL POSTMAN

sudo snap install postman
postman

Test that you can make REST API calls with Postman with this fun "Dad Joke" API. Click Create a request and 
enter https://icanhazdadjoke.com/ into the address bar. Click the "Headers" tab and add 
an entry for Accept with a value of application/json. Then click "Send" and enjoy your joke.

###################################################
INSTALL NGROK

sudo snap install ngrok

Start a sample ngrok tunnel:
ngrok http 5000

##################################################
INSTALL GOOGLE CHROME

sudo apt install chromium-browser
chromium-browser

##################################################
Installing OpenConnect

sudo apt-get install openconnect

To verify OpenConnect installation you need a VPN server to connect to. 
If you don't have one handy, go to the DevNet Sandbox Catalog and reserve one of our Sandboxes. 
Once the reservation is ready, you receive the VPN credentials.

From the terminal, run openconnect -b VPN_ADDRESS. Provide the username and password when prompted.

You should now have an active VPN connection to your Sandbox, and be able to reach the resources contained within your Pod.

The OpenConnect process is running the background as a process. You can end and disconnect by using the kill command. For example:

# Find the running process
 sudo ps -ax | grep openconnect

 # Example Output
 22741 pts/0    T      0:00 sudo openconnect https://dcloud-rtp-anyconnect.cisco.com

 # The first column is the the process id, use it to kill the process.  
 sudo kill 22741
 
#####################################################
INSTALLING DOCKER
 
Install HTTPS plugins that support repositories to be used over HTTPS.

sudo apt install apt-transport-https ca-certificates curl software-properties-common

Next, add Docker’s specific GPG key and add it to the apt key-ring to verify the package integrity.

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

Add the Docker repository to apt in order to always check for the latest stable version.

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

Now that the Docker repository is set up, update apt and then install Docker Community Edition.

sudo apt update
sudo apt install docker-ce

Verify that Docker installed and is running.

sudo systemctl status docker

# Expected output

● docker.service - Docker Application Container Engine
   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)
   Active: active (running) since Sun 2018-08-26 15:45:32 PDT; 39s ago
     Docs: https://docs.docker.com
 Main PID: 5950 (dockerd)
    Tasks: 24
   CGroup: /system.slice/docker.service
           ├─5950 /usr/bin/dockerd -H fd://
           └─5973 docker-containerd --config /var/run/docker/containerd/containerd.toml
           
Now set up permissions so you don't need sudo for every Docker command. First, create a docker group.
 
sudo groupadd docker

Add your user to the docker group.

sudo usermod -aG docker $USER

Log out of the desktop and log back in so that Ubuntu reevaluates your group membership.

Enter the following command to start a test container based on the busybox image

docker run busybox

The container start and then stops, showing no output. Verify Docker worked with the following command

docker ps -a
